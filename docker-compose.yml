services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ${PROJECT_NAME:-fastapi}_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Fhaw0025}
      POSTGRES_DB: ${POSTGRES_DB:-fastapi_db}
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-15432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: ${PROJECT_NAME:-fastapi}_redis
    restart: unless-stopped
    ports:
      - "${REDIS_EXTERNAL_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Prometheus Server
  prometheus:
    image: prom/prometheus:latest
    container_name: ${PROJECT_NAME:-fastapi}_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-168h}'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "${PROMETHEUS_EXTERNAL_PORT:-9091}:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - app_network
    depends_on:
      - fastapi_app
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3

  # FastAPI Application
  fastapi_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-fastapi}_app
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${APP_EXTERNAL_PORT:-8010}:${PORT:-8000}"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ARQ Worker for Background Tasks
  arq_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-fastapi}_worker
    restart: unless-stopped
    command: ["python", "scripts/start_worker.py"]
    env_file:
      - .env
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Metrics Proxy (Optional)
  metrics_proxy:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-fastapi}_metrics_proxy
    restart: unless-stopped
    command: ["python", "scripts/start_prometheus.py"]
    environment:
      PROMETHEUS_PORT: 9090
      PORT: ${PORT:-8000}
    ports:
      - "${METRICS_EXTERNAL_PORT:-9090}:9090"
    networks:
      - app_network
    depends_on:
      - fastapi_app
    profiles:
      - metrics

  # Pushgateway (Optional)
  pushgateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME:-fastapi}_pushgateway
    restart: unless-stopped
    command: ["python", "scripts/start_pushgateway.py"]
    environment:
      PUSHGATEWAY_PORT: 9091
    ports:
      - "${PUSHGATEWAY_EXTERNAL_PORT:-9091}:9091"
    networks:
      - app_network
    profiles:
      - metrics

  # Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ${PROJECT_NAME:-fastapi}_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "${GRAFANA_EXTERNAL_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  app_network:
    driver: bridge
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}